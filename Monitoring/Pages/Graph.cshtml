@page
@model GraphModel
@{
    ViewData["Title"] = "Graph";
}

<h2>Graph</h2>

<div>
    <canvas id="productionChart" width="400" height="200"></canvas>
</div>

<h3>Add Production Data</h3>

<form id="dataForm" asp-antiforgery="true">
    <div class="col-4">
        <div class="form-group">
            <label>Final Target:</label>
            <input type="number" asp-for="NewProduction.FinalTarget" class="form-control" />
        </div>
        <div class="form-group">
            <label>Now Target:</label>
            <input type="number" asp-for="NewProduction.NowTarget" class="form-control" />
        </div>
        <div class="form-group">
            <label>Result:</label>
            <input type="number" asp-for="NewProduction.Result" class="form-control" />
        </div>
    </div><br />
    <button class="btn btn-outline-info" type="submit">Submit</button><hr />

</form>

<p>
    Final target: Cíl, který má výroba nastavený na začátku výroby (ten se ale během výroby může změnit).<br />
    Now Target: Ideální výsledek, kterého by se výroba měla snažit držet (aby splnila plán).<br />
    Result: Reálný výsledek. <br />
</p>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var shiftStart = new Date(@Html.Raw(Json.Serialize(Model.ShiftStart)));
            var shiftEnd = new Date(@Html.Raw(Json.Serialize(Model.ShiftEnd)));

            var ctx = document.getElementById('productionChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.Labels)),
                    datasets: [
                        {
                            label: 'Final Target',
                            data: @Html.Raw(Json.Serialize(Model.FinalTargetData)),
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            fill: false,
                            tension: 0.1
                        },
                        {
                            label: 'Now Target',
                            data: @Html.Raw(Json.Serialize(Model.NowTargetData)),
                            borderColor: 'rgba(54, 162, 235, 1)',
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            fill: false,
                            tension: 0.1
                        },
                        {
                            label: 'Result',
                            data: @Html.Raw(Json.Serialize(Model.ResultData)),
                            borderColor: 'rgba(255, 99, 132, 1)',
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            fill: false,
                            tension: 0.1
                        }
                    ]
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'hour',
                                tooltipFormat: 'HH:mm',
                                displayFormats: {
                                    hour: 'HH:mm'
                                },
                                min: shiftStart,
                                max: shiftEnd
                            },
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Values'
                            }
                        }
                    }
                }
            });

            document.getElementById('dataForm').addEventListener('submit', function (event) {
                event.preventDefault();

                var formData = new FormData(event.target);
                var jsonData = {
                    FinalTarget: formData.get('NewProduction.FinalTarget'),
                    NowTarget: formData.get('NewProduction.NowTarget'),
                    Result: formData.get('NewProduction.Result')
                };

                fetch('@Url.Page("Graph")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(jsonData)
                })
                    .then(response => response.json())
                    .then(data => {
                        chart.data.labels = data.labels;
                        chart.data.datasets[0].data = data.finalTargetData;
                        chart.data.datasets[1].data = data.nowTargetData;
                        chart.data.datasets[2].data = data.resultData;
                        chart.options.scales.x.min = new Date(data.shiftStart);
                        chart.options.scales.x.max = new Date(data.shiftEnd);
                        chart.update();
                    })
                    .catch(error => console.error('Error:', error));
            });
        });
    </script>
}